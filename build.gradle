plugins {
    id 'java'
    id 'jacoco'
    id 'checkstyle'

    // https://plugins.gradle.org/plugin/com.github.spotbugs
    id 'com.github.spotbugs' version '5.0.9'

    // https://plugins.gradle.org/plugin/com.jfrog.artifactory
    id "com.jfrog.artifactory" version "4.28.4"

    // https://plugins.gradle.org/plugin/com.gradle.plugin-publish
    // com.gradle.plugin-publish auto-applies `java-gradle-plugin` and `maven-publish` plugins
    id 'com.gradle.plugin-publish' version '1.0.0'

    // https://plugins.gradle.org/plugin/org.owasp.dependencycheck
    id "org.owasp.dependencycheck" version "7.1.1"
}

group 'de.seitenbau.ozghub.prozessdeployment'

version = project.hasProperty('pluginVersion') ? pluginVersion : '99.0.0-SNAPSHOT'
println 'Plugin-Version ist  : ' + version

if (!project.hasProperty('artifactoryJenkinsPassword')
        && System.getenv('JENKINS_HOME') != null && !System.getenv('JENKINS_HOME').isEmpty()) {
    println 'WARN: Artifactory password is not set'
}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    implementation gradleApi()
    // https://mvnrepository.com/artifact/commons-io/commons-io
    implementation group: 'commons-io', name: 'commons-io', version: '2.11.0'
    // https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'
    // https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-api
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.18.0'
    // https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.18.0'
    // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.13.3'

    // https://mvnrepository.com/artifact/com.github.spotbugs/spotbugs-annotations
    compileOnly group: 'com.github.spotbugs', name: 'spotbugs-annotations', version: '4.7.1'

    // https://mvnrepository.com/artifact/org.assertj/assertj-core
    testImplementation 'org.assertj:assertj-core:3.23.1'
    // https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-engine
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
    // https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'

    // https://mvnrepository.com/artifact/com.h3xstream.findsecbugs/findsecbugs-plugin
    // https://github.com/spotbugs/spotbugs-gradle-plugin#spotbugs-version-mapping
    spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.12.0'

    // https://mvnrepository.com/artifact/org.projectlombok/lombok
    // https://projectlombok.org/setup/gradle
    compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.24'
    annotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.24'
    testCompileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.24'
    testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.24'
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    compileJava.options.encoding = 'UTF-8'
    compileTestJava.options.encoding = 'UTF-8'
    javadoc.options.encoding = 'UTF-8'
}

test {
    useJUnitPlatform()
    maxHeapSize = '1G'
    finalizedBy jacocoTestReport
    systemProperty 'file.encoding', 'UTF-8'
}

jacocoTestReport {
    dependsOn test
}

// https://github.com/spotbugs/spotbugs-gradle-plugin#configure-the-spotbugstask
spotbugsMain {
    ignoreFailures = true
    effort = 'max'
    excludeFilter = file('src/main/resources/spotbugs-exclude.xml')
}

// https://github.com/spotbugs/spotbugs-gradle-plugin/issues/391
spotbugsTest.enabled = false

// https://docs.gradle.org/current/dsl/org.gradle.api.plugins.quality.CheckstyleExtension.html
checkstyle {
    // https://checkstyle.sourceforge.io/releasenotes.html
    toolVersion = '10.3.1'
    checkstyleTest.enabled = false
}

dependencyCheck {
    suppressionFile = file('config/dependency-suppression.xml')
    formats = ['HTML', 'JSON']
}

// ##########  Lokaler Build  ##########
if (System.getenv('JENKINS_HOME') == null || System.getenv('JENKINS_HOME').isEmpty()) {
    publishing {
        repositories {
            mavenLocal()
        }
    }
}

// ##########  Build auf Jenkins  ##########
else {
    def repositoryKey = project.hasProperty('repositoryKey') ? repositoryKey : 'ci-snapshots'

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
            }
        }
    }

    artifactory {
        contextUrl = 'http://shadow-artifactory.infra.dev.seitenbau.net/artifactory'
        publish {
            repository {
                repoKey = repositoryKey
                username = 'jenkins'
                password = artifactoryJenkinsPassword
                maven = true
            }
            defaults {
                publications('mavenJava')
            }
        }
    }

    jar {
        baseName 'ozghub-prozessdeployment-gradle-plugin'
    }

    artifactoryPublish {
        dependsOn jar
    }
}

// Use java-gradle-plugin to generate plugin descriptors and override individual plugin properties.
// The names of the blocks inside 'plugins' need to be unique, they will identify the plugins being configured.
// 'id', 'implementationClass' and 'displayName' are mandatory.
// 'description' is optional and will override whatever description has been specified at bundle level, but
// in the end a description must be set for each plugin at some level.
// See https://plugins.gradle.org/docs/publish-plugin
// See https://docs.gradle.org/current/userguide/java_gradle_plugin.html
gradlePlugin {
    plugins {
        OzghubProzessGradlePlugin {
            id = 'de.seitenbau.ozghub.prozessdeployment'
            implementationClass = 'de.seitenbau.ozghub.prozessdeployment.ProzessDeploymentGradlePlugin'
            displayName = 'Gradle Plugin zum Deployen von Prozessen und Formularen im OZG-Hub'
        }
    }
}

// Specify plugin properties that apply to the whole publishing bundle
// (ie. all plugins in the current publication).
// See https://plugins.gradle.org/docs/publish-plugin
pluginBundle {
    // These are the properties used in the publication on the Gradle plugins site
    // https://plugins.gradle.org/plugin/de.seitenbau.ozghub.prozessdeployment
    website = 'https://github.com/OZG-Hub/ozghub-prozess-gradle-plugin'
    vcsUrl = 'https://github.com/OZG-Hub/ozghub-prozess-gradle-plugin'
    description = 'Tools zum Deployen von Prozessen und Formularen im OZG-Hub'
    tags = ['deployment', 'prozess', 'formular', 'ozg', 'ozg-hub']
}
